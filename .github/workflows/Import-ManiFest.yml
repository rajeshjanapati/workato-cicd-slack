name: Import-ManiFest CICD
on:
  repository_dispatch:
    types: [Import]
    inputs:
      action-type:
        type: choice
        required: true
        description: Action To Perform
        default: "Create"
        options:
          - ImportAll
          - Create
      folder_Id:
        type: string
        required: true
        description: Recipe folder Id to Import
      manifest_Name:
        type: string
        required: false
        description: Manifest Name to Import
        
        
env:
  DEPLOYMENT_NAME: Import-ManiFest CICD
  ACTION_TYPE: ${{ github.event.client_payload.action-type }}
  folder_Id: ${{ github.event.client_payload.folder_Id }}
  manifest_name: "${{github.event.client_payload.manifest_Name == '' &&  'null' || github.event.client_payload.manifest_Name}}"
  Workato_Token: ${{ secrets.PRODACCESSTOKEN }}
  TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}

jobs:
  Workato-CICD:
    name: Import-ManiFest CICD
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - id: "input-validation"
        name: Validate Input
        shell: pwsh
        run: |
          $Action="${{ env.ACTION_TYPE }}"
          $manifestName="${{ env.manifest_name }}"

          $manifestNameValid = ![string]::IsNullOrEmpty($manifestName) -And ![string]::IsNullOrWhitespace($manifestName) -And $manifestName -ne "null"

          if( $Action -eq "Create" ){
              if( $manifestNameValid ){
                  Write-Host "Input is Valid"
              }
              else {
                  Write-Error "For Create manifest Name is required"
              }
          }

      - name: Set TIMESTAMP
        id: set_timestamp
        run: |
          echo "TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S %Z")" >> $GITHUB_ENV

      - name: Set Summary File Name
        id: set_summary_file
        run: |
          TIMESTAMP=$TIMESTAMP
          echo "summary_file_name=summary_$(date -u -d "$TIMESTAMP" +"%Y-%m-%d_%H_%M_%S").txt" >> $GITHUB_ENV

      - name: Full Code Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: "${{ secrets.GITHUBTOKEN }}"
          
      - name: Import CICD
        shell: pwsh
        run: |
          ./scripts/import.ps1 -accessToken "${{ secrets.PRODACCESSTOKEN }}" -manifestName ${{env.manifest_name}} -folderId ${{env.folder_Id}} -action ${{env.ACTION_TYPE}} -summary_file_name $env:summary_file_name

      - name: Append additional Log lines to Summary File
        run: |
          SUMMARY_FILE="cicd/${{ env.summary_file_name }}"

          # Append log lines to the summary file
          echo "Workflow Executed at: ${{ env.TIMESTAMP }}" >> "$SUMMARY_FILE"
          echo "Job Status: ${{ job.status }}" >> "$SUMMARY_FILE"
          echo "Triggered by: ${{ github.actor }}" >> "$SUMMARY_FILE"

      - name: Upload Summary Log File in to Git
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.summary_file_name }}
          path: cicd/${{ env.summary_file_name }}

      - name: Remove Summary Log File from Git Repository
        run: rm cicd/${{ env.summary_file_name }}

      - name: Send Notification to Teams
        if: ${{ always() }}
        shell: pwsh
        run: |   
          
          $TIMESTAMP="${{ env.TIMESTAMP }}"
          $TEAMS_WEBHOOK_URL="${{ secrets.TEAMS_WEBHOOK_URL }}"
          $WORKFLOW_NAME="${{ github.workflow }}"
          $RUN_ID="${{ github.run_id }}"
          $RUN_NUMBER="${{ github.run_number }}"
          $GIT_BRANCH="${{ github.ref }}"
          $JOB_STATUS="${{ job.status }}"
          $EVENT_TYPE="${{ github.event_name }}"
          # if( $EVENT_TYPE -eq "schedule" ) {
          #         $TRIGGER_BY_NAME="Scheduler"
          # }
          # elseif ( $EVENT_TYPE -eq "repository_dispatch" ) {
          #   $TRIGGER_BY_NAME="Triggered from API"
          # }
          # else {
          #         $TRIGGER_BY_NAME="${{ github.actor }}"
          # }
          $ARTIFACT_LINK="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Call the function from utilities.ps1 script
          . ./scripts/utilities.ps1
          Post-MessagesToTeams -title "$TITLE" -summary "$SUMMARY" -workflowName "$WORKFLOW_NAME" -runId "$RUN_ID" -runNumber "$RUN_NUMBER" -executionTimestamp "$TIMESTAMP" -triggeredByName "$TRIGGER_BY_NAME" -EventType "$EVENT_TYPE" -gitBranch "$GIT_BRANCH" -jobStatus "$JOB_STATUS" -messageColor "$MESSAGE_COLOR" -themeColor "$THEME_COLOR" -artifactLink "$ARTIFACT_LINK" 

